generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  name          String?
  password      String?
  image         String?
  accounts      Account[]
  plans         Plan[]

  @@map("user")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

// 이메일 인증 토큰
model EmailVerificationToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("email_verification_token")
}

// 여행 장소 카테고리
model TravelCategory {
  id        String   @id @default(cuid())
  name      String   @unique
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  locations TravelLocation[]

  @@map("travel_category")
}

// 여행 장소
model TravelLocation {
  id         String   @id @default(cuid())
  categoryId String   @map("category_id")
  name       String   @unique
  updatedAt  DateTime @updatedAt @map("updated_at")
  createdAt  DateTime @default(now()) @map("created_at")

  category TravelCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  plans    Plan[]

  @@map("travel_location")
}

// 여행 계획
model Plan {
  id         String     @id @default(cuid())
  userId     String     @map("user_id")
  locationId String     @map("location_id")
  start_date DateTime
  end_date   DateTime
  items      PlanItem[]
  updatedAt  DateTime   @updatedAt @map("updated_at")
  createdAt  DateTime   @default(now()) @map("created_at")

  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  location TravelLocation @relation(fields: [locationId], references: [id])

  @@map("plan")
}

// 여행 계획 아이템
model PlanItem {
  id          String          @id @default(cuid())
  planId      String          @map("plan_id")
  tagId       String?         @map("tag_id")
  memo        String?         @db.Text
  price       Int?            @default(0)
  date        DateTime
  arrivalTime DateTime?       @map("arrival_time")
  sequence    Int
  images      PlanItemImage[]
  updatedAt   DateTime        @updatedAt @map("updated_at")
  createdAt   DateTime        @default(now()) @map("created_at")

  plan Plan @relation(fields: [planId], references: [id], onDelete: Cascade)
  tag  Tag? @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@map("plan_item")
}

// 여행 계획 아이템 이미지
model PlanItemImage {
  id         String   @id @default(cuid())
  planItemId String   @map("plan_item_id")
  updatedAt  DateTime @updatedAt @map("updated_at")
  createdAt  DateTime @default(now()) @map("created_at")

  planItem PlanItem @relation(fields: [planItemId], references: [id], onDelete: Cascade)

  @@map("plan_item_image")
}

// 여행 계획 아이템 태그
model Tag {
  id        String     @id @default(cuid())
  name      String
  planItems PlanItem[]
  updatedAt DateTime   @updatedAt @map("updated_at")
  createdAt DateTime   @default(now()) @map("created_at")

  @@map("tag")
}
